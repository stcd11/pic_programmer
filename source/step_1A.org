#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+BEGIN_COMMENT
#+STYLE: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+STYLE: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+END_COMMENT
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil 
#+TITLE: PIC Circuits
#+AUTHOR: C. Delport / P.Dougall

#+BEGIN_HTML
<div class=ribbon>
<a href="https://github.com/stcd11/pic_programmer">Fork me on GitHub</a>
</div>
<center>
<img src='img/pic5.jpg' width=33%>
</center>
#+END_HTML

* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:

e* Introduction
[[file:img/pic.jpg]]
:PROPERTIES:
:HTML_CONTAINER_CLASS: intro
:END:
** What are PIC chips?
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:
Peripheral Interface Controllers are small silicon chips which can be programmed to perform useful tasks.
In school, we tend to use Genie branded chips, like the C08 model you will use in this project. Others (e.g. PICAXE) are available.
PIC chips allow you connect different inputs (e.g. switches) and outputs (e.g. LEDs, motors and speakers), and to control them using flowcharts.
Chips such as these can be found everywhere in consumer electronic products, from toasters to cars. 

While they might not look like much, there is more computational power in a single PIC chip used in school than there was in the space shuttle that went to the moon in the 60's!
** When would I use a PIC chip?
Imagine you wanted to make a flashing bike light; using an LED and a switch alone, you'd need to manually push and release the button to get the flashing effect. A PIC chip could be programmed to turn the LED off and on once a second.
In a board game, you might want to have an electronic dice to roll numbers from 1 to 6 for you. 
In a car, a circuit is needed to ensure that the airbags only deploy when there is a sudden change in speed, AND the passenger is wearing their seatbelt, AND the front or rear bumper has been struck. PIC chips can carry out their instructions very quickly, performing around 1000 instructions per second - as such, they can react far more quickly than a person can. 
* Adding Inputs
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Design time
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:
- Our PIC so far is quite limited. While its great that it can flash in patterns (it could signal SOS in [[http://en.wikipedia.org/wiki/Morse_code][Morse]] code), but PICs become more powerful when they can interact with the World around them.
- Modify your circuit diagram to add a PTM (Push to Make) switch and 10k resistor, as shown in the screenshot below. Make sure you connect the bottom of the switch to input 3 on the PIC.
[[file:img/Step_4A.png]]
- If you run your circuit now, you'll see that clicking the button doesn't change the way the program behaves. This is because we've not told the PIC what we'd like to do yet.
- Go back to your Flowchart, and add a "Digital" diamond to the top of the program, as shown in the picture below. Double-click the diamond, and set it to check if input 1 is turned on.
[[file:img/step_5.png]]
- Connect the flow lines as shown in the picture above, then go back to your circuit and run it. Click on the switch to see what happens.
- Now go back to the flowchart and click play. While the simulation is running, you can click once on the diamond, and simulate pushing button 3 from there.
** Coding time
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:
- Modify the program so that pushing the button and holding it down turns on the LED, and releasing it turns it off. Save this as "PIC Torch.cwz"
- Change it again, so that when you push and hold the button, it flashes on and off slowly. When the button is released, make it flash quickly.
- Add two more LEDs to your circuit diagram, and make a note of which output pin they're connected to. You can change their colour by double-clicking them. Make output 0 red, output 2 amber and output 4 green.
- Write a program that makes each of the LEDs come on for 2s at a time while the button is held down. When released, they should all turn off.
- This is the *Silver badge - Progress ladder, Yellow - With assistance, write a simple program to manipulate outputs.* You can turn on multiple LEDs at once. Modify the code so that when the button is pushed, they simulate a set of [[http://www.drivingtesttips.biz/traffic-lights-sequence.html][traffic lights]] (make then change once every 2s). Save this as "PIC-traffic.cwz".
- Congratulations! This program (or any of the others you've made) could be put straight onto the circuit you're going to make in your practical sessions.

** Badge It
- Complete the quiz for the gold and silver badges
- Click on [[https://www.bournetolearn.com/quizzes/y8-piclicence/Lesson_2/index.php][this]] link to complete the quiz.
- Make sure you screenshot and upload your work along with the quiz.
- Complete the Traffic Light simulation and hand in for the platinum badge.
